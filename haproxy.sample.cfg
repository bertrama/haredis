

## Check 3 sentinels to see if they think redisA is master
backend check_master_redisA
	mode tcp
	option tcp-check
	tcp-check send PING\r\n
	tcp-check expect string +PONG
	tcp-check send SENTINEL master myharedis\r\n
	tcp-check expect string 192.168.1.13
	tcp-check send QUIT\r\n
	tcp-check expect string +OK

	server sentinelA 192.168.1.10:26379 check inter 2s
	server sentinelB 192.168.1.11:26379 check inter 2s
	server sentinelC 192.168.1.12:26379 check inter 2s

## Check 3 sentinels to see if they think redisB is master
backend check_master_redisB
	mode tcp
	option tcp-check
	tcp-check send PING\r\n
	tcp-check expect string +PONG
	tcp-check send SENTINEL master myharedis\r\n
	tcp-check expect string 192.168.1.14
	tcp-check send QUIT\r\n
	tcp-check expect string +OK

	server sentinelA 192.168.1.10:26379 check inter 2s
	server sentinelB 192.168.1.11:26379 check inter 2s
	server sentinelC 192.168.1.12:26379 check inter 2s

## Check redisA to see if it thinks it is master
backend redisA
	mode tcp
	option tcp-check
	tcp-check send PING\r\n
	tcp-check expect string +PONG
	tcp-check send info replication\r\n
	tcp-check expect string role:master
	tcp-check send QUIT\r\n
	tcp-check expect string +OK

	server redisA 192.168.1.13:6379 check inter 2s

## Check redisB to see if it thinks it is master
backend redisB
	mode tcp
	option tcp-check
	tcp-check send PING\r\n
	tcp-check expect string +PONG
	tcp-check send info replication\r\n
	tcp-check expect string role:master
	tcp-check send QUIT\r\n
	tcp-check expect string +OK

	server redisB 192.168.1.14:6379 check inter 2s
	
## If at least 2 sentinels agree with the redis host that it is master, use it.
listen redis_master :6379
	mode tcp
	use_backend redisA if { srv_is_up(redisA/redisA) } { nbsrv(check_master_redisA) ge 2 }
	use_backend redisB if { srv_is_up(redisB/redisB) } { nbsrv(check_master_redisB) ge 2 }

